#!/bin/bash
# Shortcuts for common developer tasks

# Setup the virtual environment via Poetry and install pre-commit hooks
run_install() {
   poetry install -v
   poetry run pre-commit install 
}

# Activate the current Poetry virtual environment
run_activate() {
   echo "source "$(dirname $(poetry run which python) 2>/dev/null)/activate""
}

# Regenerate the docs/requirements.txt file
run_requirements() {
   poetry export --format=requirements.txt --without-hashes --dev --output=docs/requirements.txt
   poetry run python ./dos2unix.py docs/requirements.txt
}

# Run the Pylint code checker
run_pylint() {
   echo "Running pylint checks..."

   poetry run which pylint > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run pylint -j 0 src/CedarBackup3
}

# Run the black code formatter
run_black() {
   echo "Running black formatter..."

   poetry run which black > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run black .
}

# Run the isort import formatter
run_isort() {
   echo "Running isort formatter..."

   poetry run which isort > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run isort .

   echo "done"
}

# Print diagnostics about the Cedar Backup runtime environment
run_diagnostics() {
   poetry run python -c 'from CedarBackup3.util import Diagnostics; Diagnostics().printDiagnostics(prefix="*** ")'
}

# Run the unit tests, optionally with coverage
run_unittest() {

   # The logic below mostly replicates what was available in util/test.py prior to
   # converting to the more standard unittest discovery process.

   coverage="no"
   html="no"
   pattern=""
   verbose=""

   while getopts ":ch" option; do
     case $option in
       c) 
         coverage="yes"
         ;;
       h) 
         html="yes"
         ;;
       *) 
         echo "run test [-c] [-ch] [full] [verbose] [name]"
         echo "  -c       run coverage"
         echo "  -ch      run coverage and generate the HTML report"
         echo "  full     run the full integration test suite (useful on Ken's home network)"
         echo "  verbose  enable (very) verbose test output"
         echo "  name     execute the test with name only; i.e. 'util' executes test_util.py"
         exit 1
         ;;
     esac
   done

   shift $((OPTIND -1))  # pop off the options consumed by getopts

   while [ $# -gt 0 ]; do
     case $1 in
       full) 
         sudo -v
         export PEERTESTS_FULL="Y"
         export WRITERSUTILTESTS_FULL="Y"
         export ENCRYPTTESTS_FULL="Y"
         export SPLITTESTS_FULL="Y"  
         ;;
       verbose) 
         verbose="-v"
         export FULL_LOGGING="Y"
         ;;
      *)
         pattern="-p test_$1.py"
     esac
     shift
   done

   poetry run which coverage > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   run_diagnostics

   if [ $coverage == "yes" ]; then
      poetry run coverage run --rcfile=.coveragerc -m unittest discover -s tests -t tests $verbose $pattern
      poetry run coverage report
      if [ $html == "yes" ]; then
         poetry run coverage html -d .htmlcov
         $(which start || which open) .htmlcov/index.html 2>/dev/null  # start on Windows, open on MacOS
      fi
   else
      poetry run python -m unittest discover -s tests -t tests $verbose $pattern
   fi
}

# Run the broader Tox test suite used by the GitHub CI action
run_tox() {
   poetry run which tox > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   poetry run tox -c .toxrc -e "precommit,{py}-{coverage,nocoverage}"
}

# Build the Sphinx documentation for cedar-backup3.readthedocs.io
run_docs() {
   open="no"

   while getopts ":o" option; do
     case $option in
       o)
         open="yes"
         ;;
       ?)
         echo "invalid option -$OPTARG"
         exit 1
         ;;
     esac
   done

   poetry run which sphinx-build > /dev/null
   if [ $? != 0 ]; then
      run_install
   fi

   cd docs
   poetry run sphinx-build -b html -d _build/doctrees . _build/html 2>&1 | \
         grep -v "WARNING: document isn't included in any toctree" | \
         grep -v "WARNING: more than one target found for cross-reference"

   if [ $open == "yes" ]; then
      $(which start || which open) _build/html/index.html 2>/dev/null  # start on Windows, open on MacOS
   fi
}

# Release a specific version and tag the code
run_release() {
   if [ $# != 1 ]; then
      echo "run release <version>"
      exit 1
   fi

   VERSION=$1
   COPYRIGHT="2004-$(date +'%Y')"
   DATE=$(date +'%d %b %Y')
   TAG="v$VERSION" # follow PEP 440 naming convention
   FILES="pyproject.toml Changelog src/CedarBackup3/release.py"
   MESSAGE="Release v$VERSION to PyPI"

   if [ "$(git branch -a | grep '^\*' | sed 's/^\* //')" != "master" ]; then
      echo "*** You are not on master; you cannot release from this branch"
      exit 1
   fi

   git tag -l "$TAG" | grep -q "$TAG"
   if [ $? = 0 ]; then
      echo "*** Version v$VERSION already tagged"
      exit 1
   fi

   head -1 Changelog | grep -q "^Version $VERSION     unreleased"
   if [ $? != 0 ]; then
      echo "*** Unreleased version v$VERSION is not at the head of the Changelog"
      exit 1
   fi

   poetry version $VERSION
   poetry run python ./dos2unix.py pyproject.toml

   # annoyingly, BSD sed and GNU sed are not compatible on the syntax for -i
   # I failed miserably in all attempts to put the sed command (with empty string) into a variable
   sed --version 2>&1 | grep -iq "GNU sed"
   if [ $? = 0 ]; then
      # GNU sed accepts a bare -i and assumes no backup file
      sed -i "s/^COPYRIGHT = .*$/COPYRIGHT = \"$COPYRIGHT\"/g" src/CedarBackup3/release.py
      sed -i "s/^VERSION = .*$/VERSION = \"$VERSION\"/g" src/CedarBackup3/release.py
      sed -i "s/^DATE = .*$/DATE = \"$DATE\"/g" src/CedarBackup3/release.py
      sed -i "s/^Version $VERSION     unreleased/Version $VERSION     $DATE/g" Changelog
   else
      # BSD set requires you to set an empty backup file extension
      sed -i "" "s/^COPYRIGHT = .*$/COPYRIGHT = \"$COPYRIGHT\"/g" src/CedarBackup3/release.py
      sed -i "" "s/^VERSION = .*$/VERSION = \"$VERSION\"/g" src/CedarBackup3/release.py
      sed -i "" "s/^DATE = .*$/DATE = \"$DATE\"/g" src/CedarBackup3/release.py
      sed -i "" "s/^Version $VERSION     unreleased/Version $VERSION     $DATE/g" Changelog
   fi

   git diff $FILES

   git commit --no-verify -m "$MESSAGE" $FILES
   if [ $? != 0 ]; then
      echo "*** Commit step failed"
      exit 1
   fi

   git tag -a "$TAG" -m "$MESSAGE"
   if [ $? != 0 ]; then
      echo "*** Tag step failed"
      exit 1
   fi

   echo ""
   echo "*** Version v$VERSION has been released and commited; you may publish now"
   echo ""
}

# Publish the current code to PyPI and push to GitHub
# Before doing this, you must retrieve and configure a local API token
# For instance: poetry config pypi-token.pypi token --local
# See: https://python-poetry.org/docs/repositories/#configuring-credentials
run_publish() {
   poetry build
   if [ $? != 0 ]; then
      echo "*** Build step failed."
      exit 1
   fi

   poetry publish
   if [ $? != 0 ]; then
      echo "*** Publish step failed."
      exit 1
   fi

   git push --follow-tags
}

# Execute one of the developer tasks
case $1 in
   install|setup)
      run_install
      ;;
   activate)
      run_activate
      ;;
   requirements)
      run_requirements
      ;;
   *lint)
      run_pylint
      ;;
   check*)
      run_pylint
      ;;
   black)
      run_black
      ;;
   isort)
      run_isort
      ;;
   format)
      run_black
      echo ""
      run_isort
      ;;
   diagnostics)
      run_diagnostics
      ;;
   unittest|test*)
      shift 1
      run_unittest $*
      ;;
   tox)
      run_tox
      ;;
   doc*)
      shift 1
      run_docs $*
      ;;
   release)
      shift 1
      run_release $*
      ;;
   publish)
      run_publish
      ;;
   *)
      echo ""
      echo "------------------------------------"
      echo "Shortcuts for common developer tasks"
      echo "------------------------------------"
      echo ""
      echo "Usage: run <command>"  
      echo ""
      echo "- run install: Setup the virtualenv via Poetry and install pre-commit hooks"
      echo "- run activate: Print command needed to activate the Poetry virtualenv"
      echo "- run requirements: Regenerate the docs/requirements.txt file"
      echo "- run checks: Run the PyLint code checker"
      echo "- run format: Run the code formatters"
      echo "- run diagnostics: Print diagnostics about the Cedar Backup runtime environment"
      echo "- run test: Run the unit test suite"
      echo "- run tox: Run the broader Tox test suite used by the GitHub CI action"
      echo "- run docs: Build the Sphinx documentation for cedar-backup3.readthedocs.io"
      echo "- run docs -o: Build the Sphinx documentation and open in a browser"
      echo "- run release: Release a specific version and tag the code"
      echo "- run publish: Publish the current code to PyPI and push to GitHub"
      echo ""
      echo "Try 'run test --help' to get a list of other arguments accepted by that command."
      echo ""
      echo "To run scripts, use poetry directly: "
      echo ""
      echo "- poetry run cback3"
      echo "- poetry run cback3-amazons3-sync"
      echo "- poetry run cback3-span"
      echo ""
      echo "These are the exact scripts published by Poetry as part of the Python package."
      exit 1
esac
